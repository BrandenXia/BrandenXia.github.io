<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python-Tutorial</title>
    <link href="/Python-Tutorial/"/>
    <url>/Python-Tutorial/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-Tutorial"><a href="#Python-Tutorial" class="headerlink" title="Python Tutorial"></a>Python Tutorial</h1><p>This is a Python tutorial that helps beginners quickly getting start.</p><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>Python is a programming language which can be used in lots of areas because it is simple and easy to understand. For example, it can both be used in AI area or used for automatically helping you finish your daily work, such as organizing your work and dealing with excel chart.</p><p>Learning programming language is like learning a actual language, which has its own syntax, but for communicating with computer.</p><p>For example, <a href="https://github.com/ztblick/seatingChart">here</a> is a tool that is made with Python and <a href="https://github.com/BrandenXia/TouchFish/blob/master/tic-tac-toe.py">here</a> is a tic tac toe game made with Python.</p><p>To make this tutorial easier to understand, I put an example for each part.</p><h2 id="2-Installation"><a href="#2-Installation" class="headerlink" title="2. Installation"></a>2. Installation</h2><p>Go to the <a href="https://www.python.org/downloads/">official website of Python</a> and download the latest release according to your operating system.</p><blockquote><p>Windows</p></blockquote><p>If your computer is 64-bit (normally), download <code>Windows installer (64-bit) </code> version and run it. Else, download <code>Windows installer (32-bit)</code> version and then run it.</p><blockquote><p>MacOS</p></blockquote><p>Download <code>macOS 64-bit universal2 installer</code> and run it.</p><blockquote><p>Linux</p></blockquote><p>Use your linux distribution’s default package manager, here are some common ones:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install python3<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dnf install python3<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S install python3<br></code></pre></td></tr></table></figure><h3 id="Check-if-installation-is-successful"><a href="#Check-if-installation-is-successful" class="headerlink" title="Check if installation is successful"></a>Check if installation is successful</h3><p>Open terminal (In Windows, use <code>win+r</code> and enter powershell, in MacOS, search “terminal” in launchpad, in Linux, use different action according to your desktop evironment or windows manager) and enter <code>python</code> or <code>python3</code>. If installation is successful, this command won’t return an error.</p><p>(Powershell is a command line program, a text interface system in your computer. It helps you get a deeper control of your system.)</p><p><img src="/Python-Tutorial/installation_success.png"></p><h2 id="3-Getting-start"><a href="#3-Getting-start" class="headerlink" title="3. Getting start"></a>3. Getting start</h2><h3 id="Trying-to-make-an-output"><a href="#Trying-to-make-an-output" class="headerlink" title="Trying to make an output"></a>Trying to make an output</h3><p>You can create a Python file in any folder you want and call it any name you want. Just make sure it end with <code>.py</code> so that your system will recognize it as a Python file.</p><p>Then, open it with any text editor you want.</p><p>In this example, I create a file called <code>test.py</code> on the desktop.</p><p>Write the following statement into this file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br></code></pre></td></tr></table></figure><p>And then, open the terminal and go to the folder you create the file. (You can go to any folder using <code>cd any_directory</code>. For exmaple, to go to desktop, just use <code>cd Desktop</code>).st</p><p>You can execute a Python file using <code>python filename.py</code>. In this example, I run the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python test.py<br></code></pre></td></tr></table></figure><p>It will output <code>Hello World!</code></p><p>In the statement I wrote into the file <code>test.py</code>, <code>print</code> is a function that takes <code>&quot;Hello World!&quot;</code> in the brackets as an input and output it into your terminal and <code>&quot;Hello World!&quot;</code> is a string that is input into print function.</p><h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>Variables are used to store something when created. It is like creating a reference for something, like an unknown number in math.</p><p>In Python, you can define a variable using <code>=</code>. For example, you can create a variable called <code>a</code> by the following statement:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>In this statement, you create a variable called <code>a</code> and its value is 1.</p><h4 id="Variable-Types"><a href="#Variable-Types" class="headerlink" title="Variable Types"></a>Variable Types</h4><p>There are 5 standard type of data. They are <code>number</code>, <code>string</code>,  <code>list</code>, <code>tuple</code>, <code>dict</code>.</p><p>You can use <code>type()</code> function to view the type of a variable.</p><h5 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h5><p>There are 4 smaller types of data in number. They are <code>int</code> which stand for integer, <code>float</code> which stand for fraction, <code>long</code> which stand for those number who is extra large and <code>complex</code> which stand for complex number.</p><p>Example: <code>1</code> is int, <code>2.0</code> is float, <code>100L</code> is long and <code>1+2i</code> is complex.</p><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><p>String is a group of character.</p><p>Example: <code>&quot;121eju32dhuiwd&quot;</code>, <code>&quot;hahaha&quot;</code>, <code>&quot;You are smart.&quot;</code></p><h5 id="List"><a href="#List" class="headerlink" title="List"></a>List</h5><p>List is a list of object. It allows repeated objects to appear inside. It is defined by <code>[elements]</code></p><p>It can contain any object or even another list.</p><p>Example: <code>[1, &quot;21221iejfciew&quot;, &quot;fceoifcejwi12012&quot;, [&quot;2cecew&quot;, 2312i], (&quot;efw&quot;, rkfr), &#123;1: &quot;you&quot;, 2:&quot;are&quot;, 3: &quot;smart&quot;&#125;]</code></p><h5 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h5><p>Tuple is similar to list, but it cannot be changed after defined (list can be changed by some kind of function). It is defined by <code>(elements)</code></p><p>It also can contain any object.</p><p>Example: <code>(1, 2, (3, 4), &quot;1fe&quot;, &quot;do2&quot;, [122e1, 12ewd, ko23])</code></p><h5 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h5><p>Dict stand for dictionary. Its structure is <code>&#123;key1: value1, key2: value2&#125;</code></p><p>It can contain most objects in the value position. In the key position, it can only contain hashable object, like string and number.</p><p>Example: <code>&#123;&quot;price&quot;: 10, 2: &quot;life&quot;, &quot;1&quot;: &quot;2&quot;, &quot;2e12&quot;: &quot;eweew&quot;&#125;</code></p><h3 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h3><p>In python, when you do <code>1+1</code>, <code>+</code> is the operator.</p><h4 id="Arithmetic-Operator"><a href="#Arithmetic-Operator" class="headerlink" title="Arithmetic Operator"></a>Arithmetic Operator</h4><table><thead><tr><th>Arithmetic Operator</th><th>Description</th></tr></thead><tbody><tr><td>a+b</td><td>a plus b</td></tr><tr><td>a-b</td><td>a minus b</td></tr><tr><td>a*b</td><td>a multiply b</td></tr><tr><td>a&#x2F;b</td><td>a divide b</td></tr><tr><td>a**b</td><td>The b power of a</td></tr><tr><td>a &#x2F;&#x2F; b</td><td>a divide b with no reminder</td></tr></tbody></table><h4 id="Comparison-Operator"><a href="#Comparison-Operator" class="headerlink" title="Comparison Operator"></a>Comparison Operator</h4><table><thead><tr><th>Comparison Operator</th><th>Description</th></tr></thead><tbody><tr><td>a&#x3D;&#x3D;b</td><td>compare if a and b is equal</td></tr><tr><td>a!&#x3D;b</td><td>compare if a and b is not equal</td></tr><tr><td>a&gt;b</td><td>compare if a is bigger than b</td></tr><tr><td>a&lt;b</td><td>compare if a is smaller than b</td></tr><tr><td>a&gt;&#x3D;b</td><td>compare if a is bigger than b or equal to b</td></tr><tr><td>a&lt;&#x3D;b</td><td>compare if a is smaller than b or equal to b</td></tr></tbody></table><h4 id="Assignment-Operator"><a href="#Assignment-Operator" class="headerlink" title="Assignment Operator"></a>Assignment Operator</h4><table><thead><tr><th>Assignment Operator</th><th>Description</th></tr></thead><tbody><tr><td>a&#x3D;b</td><td>let a’s value be equal to b</td></tr><tr><td>a+&#x3D;b</td><td>let a’s value be a+b</td></tr><tr><td>a-&#x3D;b</td><td>let a’s value be a-b</td></tr><tr><td>a*&#x3D;b</td><td>let a’s value be a*b</td></tr><tr><td>a&#x2F;&#x3D;b</td><td>let a’s value be a&#x2F;b</td></tr><tr><td>a%&#x3D;b</td><td>let a’s value be a mod b</td></tr><tr><td>a**&#x3D;b</td><td>let a’s value be b power of a</td></tr><tr><td>a&#x2F;&#x2F;&#x3D;b</td><td>let a’s value be a divide b with no reminder</td></tr></tbody></table><h3 id="If-sentence"><a href="#If-sentence" class="headerlink" title="If sentence"></a>If sentence</h3><p>If sentence is used to judge if specific condition is true or not. If true, the sentence after it run.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> a == <span class="hljs-number">1</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hahaha&quot;</span>)<br><span class="hljs-comment"># output: hahaha</span><br></code></pre></td></tr></table></figure><p>In this example, because <code>a == 1</code> is true, <code>print(&quot;hahaha&quot;)</code> run and <code>hahaha</code> is output.</p><h4 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if, elif, else"></a>if, elif, else</h4><p>Sometimes, you want only one of the several if sentences to run, or if there is no if sentence that fits the condition, then run something. In this condition, you can use elif and else with if sentence.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">3</span><br><span class="hljs-comment"># if a == 1, output 1</span><br><span class="hljs-keyword">if</span> a == <span class="hljs-number">1</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># if the upper if sentence doesn&#x27;t fit, try if a == 2</span><br><span class="hljs-keyword">elif</span> a == <span class="hljs-number">2</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br><span class="hljs-comment"># if neither 1 nor 2, print &quot;a is neither 1 nor 2&quot;</span><br><span class="hljs-keyword">else</span>:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a is neither 1 nor 2&quot;</span>)<br><span class="hljs-comment"># output: a is neither 1 nor 2</span><br></code></pre></td></tr></table></figure><p>In this example, because the upper two if and elif sentence both not fit, the statement after <code>else:</code> run.</p><h3 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h3><p>Sometimes, you want to run the same statement for serveral times. If you need to do it hundreds of times, you won’t want to repeat writing them for so much time. At this time, loop sentence is especially useful.</p><p>There are two types of loop. They are <code>for</code> loop and <code>while</code> loop</p><h4 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h4><p>for loop can be used to go through any object that has a sequence.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;hahaha&quot;</span>:<br>  <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># h</span><br><span class="hljs-comment"># a</span><br><span class="hljs-comment"># h</span><br><span class="hljs-comment"># a</span><br><span class="hljs-comment"># h</span><br><span class="hljs-comment"># a</span><br></code></pre></td></tr></table></figure><p>In this example, I gave a string <code>&quot;hahaha&quot;</code>, which is an object that has a sequence into for loop, and define a variable <code>i</code> to store the object in the sequence in the loop.</p><p>In the first time loop run, variable <code>i</code> is the first letter in the string <code>&quot;hahaha&quot;</code>. Therefore, <code>i</code> equals to <code>&quot;h&quot;</code> at this time.</p><p>In the second time loop run, variable <code>i</code> is the second letter in the string <code>&quot;hahaha&quot;</code>. Therefore, <code>i</code> equals to <code>&quot;a&quot;</code> at this time.</p><p>In the third time loop run, variable <code>i</code> is the third letter in the string <code>&quot;hahaha&quot;</code>. Therefore, <code>i</code> equals to <code>&quot;h&quot;</code> at this time.</p><p>…</p><h4 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h4><p>while loop is used like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> condition:<br>  statement<br></code></pre></td></tr></table></figure><p>When <code>condition</code> is true, the statement will keep running again and again.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a &lt; <span class="hljs-number">10</span>:<br>  a += <span class="hljs-number">1</span><br>  <span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># 1</span><br><span class="hljs-comment"># 2</span><br><span class="hljs-comment"># 3</span><br><span class="hljs-comment"># 4</span><br><span class="hljs-comment"># 5</span><br><span class="hljs-comment"># 6</span><br><span class="hljs-comment"># 7</span><br><span class="hljs-comment"># 8</span><br><span class="hljs-comment"># 9</span><br><span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure><p>In this example, <code>a</code> is <code>0</code> at first. In the first loop, it becomes <code>1</code>. In the next, it’s <code>2</code>. It will keep add <code>1</code> until it’s not smaller than 10.</p><h4 id="Break"><a href="#Break" class="headerlink" title="Break"></a>Break</h4><p>Sometimes, you want to end the the loop even it’s not finish. (For example, the user canceled the opteration). At this time, we can use <code>break</code> sentence to end the loop.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;oregon&quot;</span>:<br>  <span class="hljs-keyword">if</span> i == <span class="hljs-string">&quot;e&quot;</span>:<br>    <span class="hljs-keyword">break</span><br>  <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># o</span><br><span class="hljs-comment"># r</span><br></code></pre></td></tr></table></figure><p>In this example, the program quit in the third loop because the third letter of <code>oregon</code> is e. It fits the <code>if</code> condition, and then <code>break</code> sentence run. Therefore, there is only two output letter <code>o</code> and <code>r</code>.</p><h4 id="Continue"><a href="#Continue" class="headerlink" title="Continue"></a>Continue</h4><p>Continue works similar like <code>break</code>, but it won’t quit the loop. It will only end the current loop that it’s in and continue the next loop.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;oregon&quot;</span>:<br>  <span class="hljs-keyword">if</span> i == <span class="hljs-string">&quot;e&quot;</span>:<br>    <span class="hljs-keyword">continue</span><br>  <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># output:</span><br><span class="hljs-comment"># o</span><br><span class="hljs-comment"># r</span><br><span class="hljs-comment"># g</span><br><span class="hljs-comment"># o</span><br><span class="hljs-comment"># n</span><br></code></pre></td></tr></table></figure><p>In this example, in the third loop, the program didn’t print anything because the their letter of <code>oregon</code> is e. It fits the <code>if</code> condition. The <code>continue</code> sentence run and skips the <code>print(i)</code> part. Therefore, there’s an <code>e</code> missing in the output.</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Neovim Configuration</title>
    <link href="/Neovim-Configuration/"/>
    <url>/Neovim-Configuration/</url>
    
    <content type="html"><![CDATA[<h1 id="Neovim"><a href="#Neovim" class="headerlink" title="Neovim"></a>Neovim</h1><p><a href="https://github.com/neovim/neovim">Neovim</a> is a Vim-fork focused on extensibility and usability.</p><p>It supported using <a href="https://www.lua.org/">lua</a> to extend its function.</p><h2 id="Install-Extension-Manager"><a href="#Install-Extension-Manager" class="headerlink" title="Install Extension Manager"></a>Install Extension Manager</h2><blockquote><p>Linux &amp; MacOS Installation</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone --depth 1 https://github.com/wbthomason/packer.nvim\<br> ~/.local/share/nvim/site/pack/packer/start/packer.nvim<br></code></pre></td></tr></table></figure><blockquote><p>Windows Installation</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/wbthomason/packer.nvim ~\AppData\Local\nvim-data\site\pack\packer\start\packer.nvim<br></code></pre></td></tr></table></figure><h2 id="Create-files-and-directories"><a href="#Create-files-and-directories" class="headerlink" title="Create files and directories"></a>Create files and directories</h2><p>In order to make the code easy to read and change, we can separate them into different parts.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">.<br>├── init.vim<br>├── lua<br>│   ├── basic.lua<br>│   ├── keybindings.lua<br>│   ├── plugin-config<br>│   │   └── ...<br>│   └── plugins.lua<br>└── plugin<br>    └── packer_compiled.lua<br></code></pre></td></tr></table></figure><ul><li><code>init.vim</code> is used to manage all other parts of the configuration</li><li><code>basic.lua</code> is used to config the basic setting ( such as number line )</li><li><code>keybinding.lua</code> is used to config all keybinding</li><li>All files in the<code>plugin-config</code> directory is used to config the plugins</li><li><code>plugins.lua</code> is used to manage all the plugins</li><li><code>packer_compiled.lua</code> is the file that contains auto generated packer.nvim loader code</li></ul><h2 id="Basic-Configuration"><a href="#Basic-Configuration" class="headerlink" title="Basic Configuration"></a>Basic Configuration</h2><p>Edit init.vim</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vimscript">&quot; basic settings<br>lua require(&#x27;basic&#x27;)<br>&quot; keybinding settings<br>lua require(&#x27;keybindings&#x27;)<br>&quot; plugins<br>lua require(&#x27;plugins&#x27;)<br>&quot; plugins settings<br>lua require(&#x27;plugin-config/nvim-tree&#x27;)<br>lua require(&#x27;plugin-config/bufferline&#x27;)<br>lua require(&#x27;plugin-config/lualine&#x27;)<br>&quot; colorscheme<br>colorscheme dracula<br></code></pre></td></tr></table></figure><p>Edit basic.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- set default encoding to utf-8</span><br>vim.g.encoding = <span class="hljs-string">&quot;UTF-8&quot;</span><br>vim.o.fileencoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br><span class="hljs-comment">-- retain 8 lines when moving the cursor</span><br>vim.o.scrolloff = <span class="hljs-number">8</span><br>vim.o.sidescrolloff = <span class="hljs-number">8</span><br><span class="hljs-comment">-- use relative number</span><br>vim.wo.number = <span class="hljs-literal">true</span><br>vim.wo.relativenumber = <span class="hljs-literal">true</span><br><span class="hljs-comment">-- highlight where the cursor is</span><br>vim.wo.cursorline = <span class="hljs-literal">true</span><br><span class="hljs-comment">-- enable smart case</span><br>vim.o.ignorecase = <span class="hljs-literal">true</span><br>vim.o.smartcase = <span class="hljs-literal">true</span><br>vim.o.cmdheight = <span class="hljs-number">2</span><br><span class="hljs-comment">-- mouse moving support</span><br>vim.o.mouse = <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-comment">-- show space as a point</span><br>vim.o.list = <span class="hljs-literal">true</span><br>vim.o.listchars = <span class="hljs-string">&quot;space:·&quot;</span><br><span class="hljs-comment">-- enhance auto complete</span><br>vim.o.wildmenu = <span class="hljs-literal">true</span><br><span class="hljs-comment">-- always show tabline</span><br>vim.o.showtabline = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="Plugin-Installation"><a href="#Plugin-Installation" class="headerlink" title="Plugin Installation"></a>Plugin Installation</h2><p>Add those plugin config to .&#x2F;lua&#x2F;plugins.lua</p><ul><li><p>Color scheme: <a href="https://github.com/Mofiqul/dracula.nvim">Dracula</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">use <span class="hljs-string">&#x27;Mofiqul/dracula.nvim&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>File manager: <a href="https://github.com/kyazdani42/nvim-tree.lua">Nvim tree</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">use &#123;<br><span class="hljs-string">&#x27;kyazdani42/nvim-tree.lua&#x27;</span>,<br>requires = <span class="hljs-string">&#x27;kyazdani42/nvim-web-devicons&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Edit <code>./lua/plugin-config/nvim-tree.lua</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">require</span><span class="hljs-string">&#x27;nvim-tree&#x27;</span>.setup &#123;<br>  <span class="hljs-comment">-- set auto close</span><br>    auto_close = <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">-- disable git status</span><br>    git = &#123;<br>        enable = <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Tab page integration: <a href="https://github.com/akinsho/bufferline.nvim">Bufferline</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">use &#123;<br><span class="hljs-string">&#x27;akinsho/bufferline.nvim&#x27;</span>,<br>requires = <span class="hljs-string">&#x27;kyazdani42/nvim-web-devicons&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Edit <code>./lua/plugin-config/nvim-tree.lua</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- open color display</span><br>vim.opt.termguicolors = <span class="hljs-literal">true</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;bufferline&quot;</span>).setup &#123;<br>    options = &#123;<br>        <span class="hljs-comment">-- use lsp of nvim</span><br>        diagnostics = <span class="hljs-string">&quot;nvim_lsp&quot;</span>,<br>        <span class="hljs-comment">-- give a space for nvim-tree</span><br>        offsets = &#123;&#123;<br>            filetype = <span class="hljs-string">&quot;NvimTree&quot;</span>,<br>            text = <span class="hljs-string">&quot;File Explorer&quot;</span>,<br>            highlight = <span class="hljs-string">&quot;Directory&quot;</span>,<br>            text_align = <span class="hljs-string">&quot;left&quot;</span><br>        &#125;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Status line: <a href="https://github.com/nvim-lualine/lualine.nvim">Lualine</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">use &#123;<br> <span class="hljs-string">&#x27;nvim-lualine/lualine.nvim&#x27;</span>,<br> requires = &#123; <span class="hljs-string">&#x27;kyazdani42/nvim-web-devicons&#x27;</span>, opt = <span class="hljs-literal">true</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Edit <code>./lua/plugin-config/lualine.lua</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lualine&#x27;</span>).setup()<br></code></pre></td></tr></table></figure></li><li><p>Startup page: <a href="https://github.com/goolord/alpha-nvim">Alpha-nvim</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">use &#123;<br><span class="hljs-string">&#x27;goolord/alpha-nvim&#x27;</span>,<br><span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span><br><span class="hljs-built_in">require</span><span class="hljs-string">&#x27;alpha&#x27;</span>.setup(<span class="hljs-built_in">require</span><span class="hljs-string">&#x27;alpha.themes.startify&#x27;</span>.<span class="hljs-built_in">config</span>)<br><span class="hljs-keyword">end</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Float terminal: <a href="https://github.com/voldikss/vim-floaterm">Vim-floaterm</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">use <span class="hljs-string">&#x27;voldikss/vim-floaterm&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>Search plugin: <a href="https://github.com/nvim-telescope/telescope.nvim">Telescope.nvim</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">use &#123;<br> <span class="hljs-string">&#x27;nvim-telescope/telescope.nvim&#x27;</span>,<br> tag = <span class="hljs-string">&#x27;0.1.0&#x27;</span>,<br> requires = &#123; <span class="hljs-string">&#x27;nvim-lua/plenary.nvim&#x27;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Auto completion: <a href="https://github.com/neoclide/coc.nvim">Coc.nvim</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">use &#123;<br><span class="hljs-string">&#x27;neoclide/coc.nvim&#x27;</span>,<br>branch = <span class="hljs-string">&#x27;release&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="Keybindings-config"><a href="#Keybindings-config" class="headerlink" title="Keybindings config"></a>Keybindings config</h2><p>Edit <code>./lua/keybindings.lua</code></p><h3 id="Basic-keybinding"><a href="#Basic-keybinding" class="headerlink" title="Basic keybinding"></a>Basic keybinding</h3><ul><li><p>Set leader key to space</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.g.mapleader = <span class="hljs-string">&quot; &quot;</span><br>vim.g.maplocalleader = <span class="hljs-string">&quot; &quot;</span><br></code></pre></td></tr></table></figure></li><li><p>Alias for commands</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> map = vim.api.nvim_set_keymap<br><span class="hljs-keyword">local</span> opt = &#123;noremap = <span class="hljs-literal">true</span>, silent = <span class="hljs-literal">true</span> &#125;<br></code></pre></td></tr></table></figure></li><li><p>Keys for moving to different windows</p><ul><li><code>Alt + h</code> &#x3D; move to left windows</li><li><code>Alt + j</code> &#x3D; move to down windows</li><li><code>Alt + k</code> &#x3D; move to up</li><li><code>Alt + l</code> &#x3D; move to right</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">map(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;&lt;A-h&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;C-w&gt;h&quot;</span>, opt)<br>map(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;&lt;A-j&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;C-w&gt;j&quot;</span>, opt)<br>map(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;&lt;A-k&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;C-w&gt;k&quot;</span>, opt)<br>map(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;&lt;A-l&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;C-w&gt;l&quot;</span>, opt)<br></code></pre></td></tr></table></figure></li></ul><h3 id="Opening-Nvim-Tree"><a href="#Opening-Nvim-Tree" class="headerlink" title="Opening Nvim Tree"></a>Opening Nvim Tree</h3><p><code>Alt + m</code> &#x3D; open nvim tree</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">map(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;&lt;A-m&gt;&#x27;</span>, <span class="hljs-string">&#x27;:NvimTreeToggle&lt;CR&gt;&#x27;</span>, opt)<br></code></pre></td></tr></table></figure><h3 id="Moving-to-different-tabs"><a href="#Moving-to-different-tabs" class="headerlink" title="Moving to different tabs"></a>Moving to different tabs</h3><ul><li><code>Ctrl + h</code> &#x3D; move to left tab</li><li><code>Ctrl + l</code> &#x3D; move to right tab</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">map(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;&lt;C-h&gt;&quot;</span>, <span class="hljs-string">&quot;:BufferLineCyclePrev&lt;CR&gt;&quot;</span>, opt)<br>map(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;&lt;C-l&gt;&quot;</span>, <span class="hljs-string">&quot;:BufferLineCycleNext&lt;CR&gt;&quot;</span>, opt)<br></code></pre></td></tr></table></figure><h3 id="Float-terminal"><a href="#Float-terminal" class="headerlink" title="Float terminal"></a>Float terminal</h3><p><code>Alt + f</code> &#x3D; open float terminal</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">map</span><span class="hljs-params">(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;&lt;A-f&gt;&quot;</span>, <span class="hljs-string">&quot;:FloatermNew --autoclose=1 pwsh&lt;CR&gt;&quot;</span>, opt)</span></span><br></code></pre></td></tr></table></figure><h3 id="Telescope"><a href="#Telescope" class="headerlink" title="Telescope"></a>Telescope</h3><ul><li><code>&lt;Leader&gt; + f + f</code> &#x3D; search for files</li><li><code>&lt;Leader&gt; + f + b</code> &#x3D; search for tabs</li><li><code>&lt;Leader&gt; + f + h</code> &#x3D; search for commands</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">map(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;&lt;leader&gt;ff&quot;</span>, <span class="hljs-string">&quot;:Telescope find_files&lt;CR&gt;&quot;</span>, opt)<br>map(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;&lt;leader&gt;fb&quot;</span>, <span class="hljs-string">&quot;:Telescope buffers&lt;CR&gt;&quot;</span>, opt)<br>map(<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;&lt;leader&gt;fh&quot;</span>, <span class="hljs-string">&quot;:Telescope help_tags&lt;CR&gt;&quot;</span>, opt)<br></code></pre></td></tr></table></figure><h3 id="Coc-nvim"><a href="#Coc-nvim" class="headerlink" title="Coc.nvim"></a>Coc.nvim</h3><ul><li><code>Tab</code> &#x3D; move to next auto completion result</li><li><code>Shift + Tab</code> &#x3D; move to previous auto completion result</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">t</span><span class="hljs-params">(str)</span></span><br>    <span class="hljs-keyword">return</span> vim.api.nvim_replace_termcodes(str, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_G.smart_tab</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> vim.fn.pumvisible() == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> t<span class="hljs-string">&#x27;&lt;C-N&gt;&#x27;</span> <span class="hljs-keyword">or</span> t<span class="hljs-string">&#x27;&lt;Tab&gt;&#x27;</span><br><span class="hljs-keyword">end</span><br>map(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;&lt;Tab&gt;&#x27;</span>, <span class="hljs-string">&#x27;v:lua.smart_tab()&#x27;</span>, &#123;expr = <span class="hljs-literal">true</span>, noremap = <span class="hljs-literal">true</span>&#125;)<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_G.smart_stab</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">return</span> vim.fn.pumvisible() == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> t<span class="hljs-string">&#x27;&lt;C-P&gt;&#x27;</span> <span class="hljs-keyword">or</span> t<span class="hljs-string">&#x27;&lt;S-Tab&gt;&#x27;</span><br><span class="hljs-keyword">end</span><br>map(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;&lt;S-Tab&gt;&#x27;</span>, <span class="hljs-string">&#x27;v:lua.smart_stab()&#x27;</span>, &#123;expr = <span class="hljs-literal">true</span>, noremap = <span class="hljs-literal">true</span>&#125;)<br></code></pre></td></tr></table></figure><h1 id="Finish"><a href="#Finish" class="headerlink" title="Finish"></a>Finish</h1><p>Run <code>:PackerSync</code> and then use nvimin your work.</p><p>You can also add custom programming language support by installing plugin of Coc.nvim. (Install by <code>:CocInstall PluginName</code> command)</p>]]></content>
    
    
    <categories>
      
      <category>Neovim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>DIY</tag>
      
      <tag>Neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux Installation and Configuration</title>
    <link href="/ArchLinux-Installation-and-Configuration/"/>
    <url>/ArchLinux-Installation-and-Configuration/</url>
    
    <content type="html"><![CDATA[<h1 id="ArchLinux"><a href="#ArchLinux" class="headerlink" title="ArchLinux"></a>ArchLinux</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li><p>Download the <a href="https://archlinux.org/download/">ArchLinux ISO file</a> and use <a href="https://rufus.ie/">Rufus</a> to write it to a USB drive.</p></li><li><p>Go to BIOS setting and change the boot sequence.</p></li><li><p>Boot the live environment.</p></li><li><p>Connect to the internet using iwctl.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ iwctl<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs iwd">[iwd]# device list<br>[iwd]# station device_name scan<br>[iwd]# station device_name get-networks<br>[iwd]# station device_name connect Network_Name<br></code></pre></td></tr></table></figure></li><li><p>Update system time</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ timedatectl set-ntp <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>Partition the disk using <code>cfdisk</code></p><table><thead><tr><th align="center">Partition</th><th align="center">Space</th></tr></thead><tbody><tr><td align="center">boot</td><td align="center">1G</td></tr><tr><td align="center">swap</td><td align="center">1G</td></tr><tr><td align="center">root</td><td align="center">All rest spaces</td></tr></tbody></table></li><li><p>Format partitions</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mkfs.ext4 /dev/root_partition<br>$ mount /dev/root_partition /mnt<br>$ mkswap /dev/swap_partition<br>$ swapon /dev/swap_partition<br>$ mkfs.fat -F 32 /dev/efi_system_partition<br>$ mount --<span class="hljs-built_in">mkdir</span> /dev/efi_system_partition /mnt/boot<br></code></pre></td></tr></table></figure></li><li><p>Start installation</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pacstrap /mnt base linux linux-firmware neovim fish networkmanager man-db man-pages<br>$ genfstab -U /mnt &gt;&gt; /mnt/etc/fstab<br></code></pre></td></tr></table></figure></li><li><p>Chroot into the system and configure it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ arch-chroot /mnt<br>$ <span class="hljs-built_in">ln</span> -sf /use/share/zoneinfo/region /etc/localtime<br>$ hwclock --systohc<br>$ vim /etc/locale.gen<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">en_US.UTF-<span class="hljs-number">8</span> UTF-<span class="hljs-number">8</span><br>zh_CN.UTF-<span class="hljs-number">8</span> UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ locale-gen<br>$ vim /etc/locale.conf<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">LANG=zh_CN.UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim /etc/hostname<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">brandenxia<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mkinitcpio -P<br>$ passwd<br>$ useradd -m -G wheel -s /usr/bin/fish brandenxia<br>$ passwd brandenxia<br>$ visudo<br>$ systemctl <span class="hljs-built_in">enable</span> NetworkManager<br>$ <span class="hljs-built_in">exit</span><br>$ umount /mnt/boot<br>$ umount /mnt<br>$ shutdown -h now<br></code></pre></td></tr></table></figure></li></ol><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><ol><li><p>Install the desktop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">user login: brandenxia<br>password:<br>$ sudo pacman -S xorg<br>$ sudo pacman -S i3-gaps<br></code></pre></td></tr></table></figure></li><li><p>Config the desktop</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># copy config from github</span><br>$ git <span class="hljs-built_in">clone</span> https://github.com/BrandenXia/configs-dotfile ~/.config<br><span class="hljs-comment"># install necessary software</span><br>$ sudo pacman -S rofi ranger neofetch i3status alacritty fcitx5 flameshot pasystray nitrogen parcellite firefox<br><span class="hljs-comment"># install font</span><br>$ sudo pacman -S ttf-roboto ttf-roboto-mono<br><span class="hljs-comment"># install aur manager</span><br>$ sudo pacman -S paru<br><span class="hljs-comment"># install i3lock-fancy from aur</span><br>$ paru -S i3lock-fancy<br></code></pre></td></tr></table></figure></li><li><p>Enter desktop environment</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># start desktop</span><br>$ startx <span class="hljs-string">&quot;/usr/bin/i3&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>Finished</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>DIY</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/Hello-World/"/>
    <url>/Hello-World/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>If you see this article, that means this blog run successfully!</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ul><li>For MacOS User</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ brew install hexo<br></code></pre></td></tr></table></figure><ul><li>Using NPM to install</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo -g<br></code></pre></td></tr></table></figure><h2 id="Configing-the-blog"><a href="#Configing-the-blog" class="headerlink" title="Configing the blog"></a>Configing the blog</h2><h3 id="Initialize-the-blog"><a href="#Initialize-the-blog" class="headerlink" title="Initialize the blog"></a>Initialize the blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init blog <span class="hljs-comment"># &#x27;blog can be replaced as any name&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> blog<br></code></pre></td></tr></table></figure><h3 id="Installing-the-theme"><a href="#Installing-the-theme" class="headerlink" title="Installing the theme"></a>Installing the theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid ./themes/fluid<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># ./_config.yml</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><h3 id="Customize-the-information-showed"><a href="#Customize-the-information-showed" class="headerlink" title="Customize the information showed"></a>Customize the information showed</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># ./_config.fluid.yml</span><br><span class="hljs-attr">navbar:</span><br><span class="hljs-comment"># your custom title</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&#x27;Branden Xia&#x27;</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span><br> <span class="hljs-comment"># your custom slogan</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;Blog of Branden Xia&quot;</span><br><span class="hljs-attr">about:</span><br><span class="hljs-comment"># put your avatar file into ./source/img/avatar.jpeg</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.jpeg</span><br>  <span class="hljs-comment"># your name</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Branden</span> <span class="hljs-string">Xia</span><br>  <span class="hljs-comment"># your custom introduction</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;A high school student&quot;</span><br>  <span class="hljs-attr">icons:</span><br>  <span class="hljs-comment"># Github</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-github-fill&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://github.com/BrandenXia&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;GitHub&quot;</span> &#125;<br>    <span class="hljs-comment"># Steam</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-steam&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;https://steamcommunity.com/id/brandenxia&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;Steam&quot;</span>&#125;<br>    <span class="hljs-comment"># Email</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&quot;iconfont icon-mail&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;mailto:xxtbranden@outlook.com&quot;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&quot;Email&quot;</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># ./_config.yml</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Blog</span> <span class="hljs-string">of</span> <span class="hljs-string">Branden</span> <span class="hljs-string">Xia</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">Branden</span> <span class="hljs-string">Xia</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://BrandenXia.github.io</span><br></code></pre></td></tr></table></figure><h3 id="Try-this-blog-locally"><a href="#Try-this-blog-locally" class="headerlink" title="Try this blog locally"></a>Try this blog locally</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g -d<br>$ hexo s<br></code></pre></td></tr></table></figure><p>Then, visit <code>localhost: 4000</code> to view the blog.</p><h3 id="Create-new-page"><a href="#Create-new-page" class="headerlink" title="Create new page"></a>Create new page</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># use your custom name instead</span><br>$ hexo new post HelloWorld<br><span class="hljs-comment"># regenerate whole blog</span><br>$ hexo g -d<br></code></pre></td></tr></table></figure><p>Edit <code>./source/_posts/HelloWorld.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: HelloWorld<br>date: 2022-09-05 00:52:31<br>tags:<br><span class="hljs-bullet">-</span> Network<br>categories:<br><span class="hljs-section">- Network</span><br><span class="hljs-section">---</span><br>Write your article here<br></code></pre></td></tr></table></figure><h3 id="Deploy-blog-to-GitHub-page"><a href="#Deploy-blog-to-GitHub-page" class="headerlink" title="Deploy blog to GitHub page"></a>Deploy blog to GitHub page</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-comment"># replace username with your own username, remember to create repository in GitHub first</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/username/username.github.io.git</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br><span class="hljs-comment"># your personal access token</span><br><span class="hljs-attr">token:</span> <span class="hljs-string">token</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Network</tag>
      
      <tag>GitHub Page</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
